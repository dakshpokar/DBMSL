db.createCollection('StockData');

db.StockData.remove({});

db.StockData.insert({name: "Daksh", age: 56, email: "dakshpokar@gmail.com", stocks: [
    {
        name:  "Reliance",
        price:  200,
        quantity: 7
    },
    {
        name:   "Jio",
        price:  450,
        quantity: 10
    },
    {
        name:   "Tata",
        price:  180,
        quantity: 8
    }
]});

db.StockData.insert({name: "Sanket", age: 17, email: "spokar964@yahoo.com", stocks: [
    {
        name:  "Reliance",
        price:  200,
        quantity: 7
    },
    {
        name:   "Jio",
        price:  450,
        quantity: 10
    }
]});

db.StockData.insert({name: "Aniket", age: 5, email: "anikotalwar@aol.com", stocks: [
    {
        name:  "Tata",
        price:  180,
        quantity: 7
    },
    {
        name:   "Tech Mahindra",
        price:  340,
        quantity: 1
    }
]});

db.StockData.insert({name: "Bora", age: 2, email: "Bora@aol.com", stocks: [
    {
        name:  "Apple",
        price:  110,
        quantity: 4
    },
    {
        name:   "Boieng",
        price:  50,
        quantity: 1
    }
]});

db.StockData.insert({name: "Atharva", age: 1, email: "atharva@gmail.com", stocks: [
    {
        name:  "Samsung",
        price:  1,
        quantity: 4
    },
    {
        name:   "Munich Inc.",
        price:  11,
        quantity: 1
    }
]});


db.StockData.insert({name: "Goswami", age: 1, email: "goswami@gmail.com", stocks: [
    {
        name:  "Samsung",
        price:  1,
        quantity: 4
    },
    {
        name:   "Munich Inc.",
        price:  11,
        quantity: 1
    }
]});

db.StockData.insert({name: "Tendulkar", age: 16, email: "tendulkar@yahoo.com", stocks: [
    {
        name:  "Sachin",
        price:  100,
        quantity: 4
    },
    {
        name:   "Jio",
        price:  450,
        quantity: 1
    },
    {
        name:   "Tata",
        price:  180,
        quantity: 6
    }
]});

db.StockData.insert({name: "Raj", age: 16, email: "raj@yahoo.com", stocks: [
    {
        name:   "Yahoo",
        price:  450,
        quantity: 4
    },
    {
        name:   "Tata",
        price:  180,
        quantity: 4
    }
]});
db.StockData.insert({name: "Rohan", age: 14, email: "rohan@gmail.com", stocks: [
    {
        name:  "Samsung",
        price:  1,
        quantity: 7
    },
    {
        name:   "Munich Inc.",
        price:  11,
        quantity: 3
    }
]});
db.StockData.insert({name: "Rajesh", age: 16, email: "rajesh@gmail.com", stocks: [
    {
        name:  "Sachin",
        price:  100,
        quantity: 3
    },
    {
        name:   "Jio",
        price:  450,
        quantity: 6
    },
    {
        name:   "Tata",
        price:  180,
        quantity: 2
    }
]});
db.StockData.insert({name: "Ram", age: 19, email: "ram@gmail.com", stocks: [
    {
        name:  "Samsung",
        price:  1,
        quantity: 8
    },
    {
        name:   "Munich Inc.",
        price:  11,
        quantity: 4
    }
]});
db.StockData.insert({name: "Rahul", age: 12, email: "rahul@gmail.com", stocks: []});
db.StockData.insert({_id: 1, age: 15, email: "me@me.com", stocks : []});

Query #0: 

Query #1: Count number of stocks
db.StockData.count()

Query #2: Display all stocks
db.StockData.find()

Query #3:	People having Samsung Stock

db.StockData.find({"stocks.name" : "Samsung" })



Query #4:	Person having age greater than 18, use of gte

db.StockData.find({age : { $gte : 18 } } );

Query #4.5: Person having age less than 18, use of lte

db.StockData.find({age : { $lte : 18 } } );


Query #5:	Person having R in their name and age > 12

db.StockData.find({name: { $regex : "^R" },  age : {$gte : 12}})


Query #6:	Person having yahoo mail as email and stock of Yahoo

db.StockData.find({ email: {$regex: "yahoo.com"}, "stocks.name": "Yahoo"});


Query #7:	Price of all shares each person has

db.StockData.aggregate( 
	[ 
		{
			$unwind: "$stocks"
		},
		{
			$group:
				{
					_id: "$name",
					totalAmount: { $sum: { $multiply: [ "$stocks.price", "$stocks.quantity" ] } }
				}	
		}
	] 
).pretty()

Query #8:	Person who has shares worth greater than 1000
db.StockData.aggregate( 
	[ 
		{
			$unwind: "$stocks"
		},
		{
			$group:
				{
					_id: "$name",
					totalAmount: { $sum: { $multiply: [ "$stocks.price", "$stocks.quantity" ] } }
				}
		},
		{
			$group:
			{
				_id: "$name",
				totalAmount: { $gte : 1000 }
			}
		}
	] 
)

Query #9: MongoDB save method
db.StockData.save({_id: 1, name: "Goswami", age: 17, email: "meA@meA.com", stocks : []})

Query #10: Update multi
db.StockData.update({age: 17}, {$set : {age: 18}}, {multi : true})

Query #11: Update upsert
db.StockData.update({age: 89}, {name: "Rajkumar", email: "raj@raj.com", stocks : []}, {upsert: true})